{"version":3,"sources":["webpack:///./assets/js/theme/auth.js"],"names":["Auth","formCreateSelector","registerLoginValidation","$loginForm","loginModel","loginValidator","nod","submit","add","selector","validate","cb","val","result","email","errorMessage","context","useValidEmail","password","enterPass","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","forgotPasswordValidator","forms","registerNewPasswordValidation","newPasswordForm","newPasswordValidator","$","passwordSelector","password2Selector","Validators","setPasswordValidation","passwordRequirements","registerCreateAccountValidator","$createAccountForm","validationModel","validation","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","$last","stateCountry","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","cleanUpStateValidation","setEmailValidation","loaded","next","classifyForm","$newPasswordForm","length"],"mappings":"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","file":"theme-bundle.chunk.15.js","sourcesContent":["import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport $ from 'jquery';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport { classifyForm, Validators } from './common/form-utils';\n\nexport default class Auth extends PageManager {\n    constructor() {\n        super();\n        this.formCreateSelector = 'form[data-create-account-form]';\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.submit((event) => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.submit((event) => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector);\n        }\n\n        if ($passwordElement && $password2Element) {\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n            );\n        }\n\n        $createAccountForm.submit((event) => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     * @param next\n     */\n    loaded(next) {\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n\n        next();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/theme/auth.js"],"sourceRoot":""}